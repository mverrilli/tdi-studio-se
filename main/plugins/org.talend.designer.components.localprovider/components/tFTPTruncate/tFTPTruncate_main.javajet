<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
	String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	boolean sftp = false;
	boolean ftps = false;
	boolean moveToCurrentDir = ("true").equals(ElementParameterParser.getValue(node, "__MOVE_TO_THE_CURRENT_DIRECTORY__"));
	boolean useGlob = ("true").equals(ElementParameterParser.getValue(node, "__PERL5_REGEX__"));
	if(("true").equals(useExistingConn)){
		List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();
		for(INode n : nodeList){
			if(n.getUniqueName().equals(connection)){
				sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
				ftps = ("true").equals(ElementParameterParser.getValue(n, "__FTPS__"));
			}
		}
	}else{
		sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
		ftps = ("true").equals(ElementParameterParser.getValue(node, "__FTPS__"));
	}
	if(sftp){  /* sftp */ 
%>
		globalMap.put("<%=cid %>_CURRENT_STATUS", "No file truncated.");
		java.util.Set<String> keySet<%=cid %> = map<%=cid %>.keySet(); 
		for (String key<%=cid %> : keySet<%=cid %>) {     
    		String filemask<%=cid %> = key<%=cid %>; 
	    	String dir<%=cid %> = null;
    	    <%if(!useGlob) {//perl5 mode not support windows(\) path separator at the mask string%>
       			String mask<%=cid %> = filemask<%=cid %>.replaceAll("\\\\", "/") ;
	        <%}else{%>
		        String mask<%=cid %> = filemask<%=cid %>;
        	<%}%>
	    	int i<%=cid %> = mask<%=cid %>.lastIndexOf('/');
			if (i<%=cid %>!=-1) {
				dir<%=cid %> = mask<%=cid %>.substring(0, i<%=cid %>); 
				mask<%=cid %> = mask<%=cid %>.substring(i<%=cid %>+1); 
    		}
<%
			//bug TDI-19189 make regex to match the file name with Regular Expressions  
%>    	
    	    <%if(!useGlob) {%>
        	    mask<%=cid %> = org.apache.oro.text.GlobCompiler.globToPerl5(mask<%=cid %>.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	        <%}%>
			java.util.Vector listings<%=cid %> = c_<%=cid %>.ls(<%=remotedir %>);
			for (int m<%=cid %> = 0; m<%=cid %> < listings<%=cid %>.size(); m<%=cid %>++) { 
				String filePath<%=cid%> =  ((com.jcraft.jsch.ChannelSftp.LsEntry) listings<%=cid %>.elementAt(m<%=cid %>)).getFilename() ;
				if ( filePath<%=cid%>.matches(mask<%=cid %>)) {
					try {
						c_<%=cid%>.put(new java.io.ByteArrayInputStream(new byte[]{}), <%=remotedir %>+"/"+filePath<%=cid%>);
						globalMap.put("<%=cid %>_CURRENT_STATUS", "File truncate OK.");
						<%if(isLog4jEnabled){%>
							log.debug("<%=cid%> - '" + filePath<%=cid%>  + "' truncate ok.");
						<%}%>
					} catch (com.jcraft.jsch.SftpException se) {
					    globalMap.put("<%=cid%>_ERROR_MESSAGE",se.getMessage());
                		globalMap.put("<%=cid %>_CURRENT_STATUS", "File truncate fail.");
    	                throw se;
					}
					nb_file_<%=cid%>++;
				}
			}	     
   		}  
<%
	} else {  /* ftp+s */
%>
			globalMap.put("<%=cid %>_CURRENT_STATUS", "No file truncated.");
			java.util.Set<String> keySet<%=cid %> = map<%=cid %>.keySet();
			for (String key<%=cid %> : keySet<%=cid %>) {
				<% /*prepare filemask*/ %>
				String filemask<%=cid %> = key<%=cid %>;
<%
					if ("false".equals(useExistingConn) || !moveToCurrentDir) {
						String remoteDirReplaced = remotedir.replaceAll("\\\\", "/");
%>
						filemask<%=cid %> = <%=remoteDirReplaced %> + "/" + filemask<%=cid %>;
<%
					}
%>
				String dir<%=cid %> = null;
				String mask<%=cid %> = null;
<%
				if(!useGlob) { //perl5 mode not support windows(\) path separator at the mask string
%>
					mask<%=cid %> = filemask<%=cid %>.replaceAll("\\\\", "/") ;
<%
				} else {
%>
					mask<%=cid %> = filemask<%=cid %>;
<%
				}
%>
				int i<%=cid %> = mask<%=cid %>.lastIndexOf('/');

				if (i<%=cid %>!=-1) {
					dir<%=cid %> = mask<%=cid %>.substring(0, i<%=cid %>);
					mask<%=cid %> = mask<%=cid %>.substring(i<%=cid %>+1);
				}

				if (dir<%=cid %> != null && !"".equals(dir<%=cid %>)) {
					boolean doesDirExist_<%=cid %> = ftp_<%=cid %>.changeWorkingDirectory(dir<%=cid %>);
					if (!doesDirExist_<%=cid %>) {
<%
						if (isLog4jEnabled) {
%>
							log.warn("Directory " + dir<%=cid %> + " does not exist. Filemask " + filemask<%=cid %> + " ignored");
<%
						}
%>
						break; //skip filemask with not existing dir
					}
				}
<%
				if(!useGlob) {
%>
					mask<%=cid %> = org.apache.oro.text.GlobCompiler.globToPerl5(mask<%=cid %>.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
<%
				}
%>
				org.apache.commons.net.ftp.FTPFile[] filesInDirectory_<%=cid%> = null;
				boolean getFileNamesFailed_<%=cid%> = false;
				try {
					filesInDirectory_<%=cid%> = ftp_<%=cid %>.listFiles();
				} catch(java.io.IOException e_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
					getFileNamesFailed_<%=cid%> = true;
<%
					if(isLog4jEnabled) {
%>
						log.warn("<%=cid%> - " + e_<%=cid%>.getMessage());
<%
					}
%>
				}

				if (getFileNamesFailed_<%=cid %>) {
<%
					if (isLog4jEnabled) {
%>
						log.warn("Can't get file names from " + dir<%=cid %> + ". Filemask " + filemask<%=cid %> + " ignored");
<%
					} else {
%>
						System.err.println("Can't get file names from " + dir<%=cid %> + ". Filemask " + filemask<%=cid %> + " ignored");
<%
					}
%>
				} else {
					<% /*search files matches to filemask and truncate them*/ %>
					for (org.apache.commons.net.ftp.FTPFile file_<%=cid %> : filesInDirectory_<%=cid%>) {
						String fileName_<%=cid%> = file_<%=cid %>.getName();
						if (fileName_<%=cid%>.matches(mask<%=cid %>)) {
							boolean successTruncated_<%=cid %> = false;
								if (file_<%=cid %>.isFile()) {
									successTruncated_<%=cid %> = ftp_<%=cid %>.storeFile(fileName_<%=cid%>, new java.io.ByteArrayInputStream(new byte[]{}));
									if (successTruncated_<%=cid %>) {
										globalMap.put("<%=cid %>_CURRENT_STATUS", "File truncate OK.");
										nb_file_<%=cid%>++;
										<%if(isLog4jEnabled){%>
											log.debug("<%=cid%> - File '" + fileName_<%=cid%>  + "' was truncated from the remote directory " + <%=remotedir %>);
										<%}%>
									} else {
										String responceFTPMessage = ftp_<%=cid %>.getReplyString();
										String errorMessageDeleteFail = "<%=cid%> - File '" + fileName_<%=cid%>  + "' was not truncated. Error message: " + responceFTPMessage;
										<%if(isLog4jEnabled){%>
											log.error(errorMessageDeleteFail);
										<%} else { %>
											System.err.println(errorMessageDeleteFail);
										<%}%>
										globalMap.put("<%=cid %>_CURRENT_STATUS", "File truncate fail.");
										throw new RuntimeException(errorMessageDeleteFail);
									}
								}
							}
					}
				}
			}

			<% /*return to root dir for next filemask*/ %>
			ftp_<%=cid %>.changeWorkingDirectory(rootWorkDir_<%=cid %>);
<%} %>
