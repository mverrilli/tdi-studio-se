<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
        java.util.Map
        java.util.List
        org.talend.core.model.utils.TalendTextUtils
" 
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
// component id
String cid = node.getUniqueName();

log = new LogUtil(node);

if(("false").equals(ElementParameterParser.getValue(node,"__ADVANCED_USE__"))) {
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata!=null) {
	     
	        List<IMetadataColumn> listColumns = metadata.getListColumns(); 
	        
	        List<Map<String, String>> params = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__PARAMS__");
	        
	        boolean needAuth = ("true").equals(ElementParameterParser.getValue(node,"__NEED_AUTH__"));
	        String username = ElementParameterParser.getValue(node,"__AUTH_USERNAME__");
	        String password = ElementParameterParser.getValue(node,"__AUTH_PASSWORD__");
	        
	        boolean winAuth = ("true").equals(ElementParameterParser.getValue(node,"__WIN_AUTH__"));
	        String domain = ElementParameterParser.getValue(node,"__DOMAIN__");
	        
	        boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	        String proxuHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
	        String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
	        String proxuUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
	        String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
	        
	        boolean needSSLtoTrustServer = ("true").equals(ElementParameterParser.getValue(node,"__NEED_SSL_TO_TRUSTSERVER__"));
	        String trustStoreFile = ElementParameterParser.getValue(node,"__SSL_TRUSTSERVER_TRUSTSTORE__");
	        String trustStorePassword = ElementParameterParser.getValue(node,"__SSL_TRUSTSERVER_PASSWORD__");
	        
	        
	        String timeoutStr = ElementParameterParser.getValue(node,"__TIMEOUT__");
			String timeout = (timeoutStr!=null&&!("").equals(timeoutStr))?timeoutStr:"20";
			
	        String endpoint = ElementParameterParser.getValue(node,"__ENDPOINT__");
	        String method = ElementParameterParser.getValue(node,"__METHOD__");
	        
	        String passwordFieldName = "";
	        
	        if(method != null && !("\"runJob\"").equals(method.trim())) {
			%>
				/////////////////////////////////// 
		        System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
		        Object[] params_<%=cid %> = new Object[] {
			        <%=endpoint %>, 
			        <%=method %>,      
					<%
			        for (int i = 0; i < params.size(); i++) {
			            Map<String, String> line = params.get(i);
						%>
			    	    <%= line.get("VALUE") %>,
					<%
			        }
					%>      
		        };
				<% 
				if (needSSLtoTrustServer) {
				%>   
					System.setProperty("javax.net.ssl.trustStore", <%=trustStoreFile %>);
					
                    <%
                    passwordFieldName = "__SSL_TRUSTSERVER_PASSWORD__";
                    %>
                    
                    <%if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%> 
                    	final String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                    <%} else {%>
                    	final String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
                    <%}%>					
					
					System.setProperty("javax.net.ssl.trustStorePassword", decryptedPwd_<%=cid%>);
					<%log.info(log.str("Set ssl."));%>
				<% 
				}
				if(needAuth){
                passwordFieldName = "__AUTH_PASSWORD__";
                %>
                
                <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>				
								
					<%
					if (!winAuth) {
					%>        	   
		        		org.talend.DynamicInvoker.setAuth(true, <%=username %>, decryptedPassword_<%=cid%>);
						<%log.info(log.str("Set username and password."));%>
					<%
		  			}else{
		  				String domain_username = "\""+TalendTextUtils.removeQuotes(domain)+"\\\\"+TalendTextUtils.removeQuotes(username)+"\"";
						%>
						org.talend.DynamicInvoker.setWINAuth(true, <%=domain_username %>, decryptedPassword_<%=cid%>);
						<%log.info(log.str("Set username, password and domain."));%>	
					<%
		  			}
		  		}
				if (useProxy) {
				%>  
				
                    <%
                    passwordFieldName = "__PROXY_PASSWORD__";
                    %>
                    
                    <%if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%> 
                    	final String decryptedProxyPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                    <%} else {%>
                    	final String decryptedProxyPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
                    <%}%>				
				
					org.talend.DynamicInvoker.setHttpProxy(true, <%=proxuHost %>, <%=proxyPort %>, <%=proxuUser %>, decryptedProxyPwd_<%=cid%>);
					System.setProperty("http.proxyHost", <%=proxuHost %>);
					System.setProperty("http.proxyPort", <%=proxyPort %>);
					System.setProperty("http.proxyUser", <%=proxuUser %>);
					System.setProperty("http.proxyPassword", decryptedProxyPwd_<%=cid%>);
						
					java.net.Authenticator.setDefault(
					new java.net.Authenticator() {
						public java.net.PasswordAuthentication getPasswordAuthentication() {
							return new java.net.PasswordAuthentication(
							   <%=proxuUser %>, decryptedProxyPwd_<%=cid%>.toCharArray());
						}
					}
					);
					<%log.info(log.str("Set proxy."));%>
				<%
	  			}
				%> 
				org.talend.DynamicInvoker.setTimeOut(<%=timeout %>);
			
				<%log.info(log.str("Sending soap request to endpoint."));%>
		 		org.talend.DynamicInvoker.main(params_<%=cid %>);
		 		java.util.Map result_<%=cid %> = org.talend.DynamicInvoker.getResult();
		        
		        Object[] results_<%=cid %> = null;
			    int nb_line_<%=cid %> = 0;
			
		        for (Object key_<%=cid %> : result_<%=cid %>.keySet()) {
	        
		           results_<%=cid %> = new Object[<%=listColumns.size()==0? 1 : listColumns.size()%>];
		            
		           Object value_<%=cid %> = result_<%=cid %>.get(key_<%=cid %>);
		           if (value_<%=cid %> instanceof Object[]){
		                Object[] objArr_<%=cid %> = (Object[])value_<%=cid %>;
		                int len_<%=cid %> = Math.min(objArr_<%=cid %>.length, results_<%=cid %>.length);
		                int k_<%=cid %> = 0;
		                for (int i_<%=cid %> = 0; i_<%=cid %> < len_<%=cid %>; i_<%=cid %>++ ) {
		                    results_<%=cid %>[k_<%=cid %>] = objArr_<%=cid %>[k_<%=cid %>];
		                }
	                
			        } else if (value_<%=cid %> instanceof java.util.List) {
			        	java.util.List list_<%=cid %> = (java.util.List)value_<%=cid %>;
			            int len_<%=cid %> = Math.min(list_<%=cid %>.size(), results_<%=cid %>.length);
			            int k_<%=cid %> = 0;
			            for (java.util.Iterator iter_<%=cid %> = list_<%=cid %>.iterator(); iter_<%=cid %>.hasNext() && k_<%=cid %> < len_<%=cid %>; k_<%=cid %>++) {
			            	results_<%=cid %>[k_<%=cid %>] = iter_<%=cid %>.next();
			            }
	                                
	           		} else if (value_<%=cid %> instanceof java.util.Map) {                
						java.util.Map map_<%=cid %> = (java.util.Map)value_<%=cid %>;
		                java.util.Collection values_<%=cid %> = map_<%=cid %>.values();
		                int len_<%=cid %> = Math.min(values_<%=cid %>.size(), results_<%=cid %>.length);
		                int k_<%=cid %> = 0;
		                for (java.util.Iterator iter_<%=cid %> = values_<%=cid %>.iterator(); iter_<%=cid %>.hasNext() && k_<%=cid %> < len_<%=cid %>; k_<%=cid %>++) {
		                    results_<%=cid %>[k_<%=cid %>] = iter_<%=cid %>.next();
		                }
	
	            	} else if (value_<%=cid %> instanceof org.w3c.dom.Element) {
	                	results_<%=cid %>[0] = org.apache.axis.utils.XMLUtils.ElementToString((org.w3c.dom.Element)value_<%=cid %>);
	                
		            }else if (value_<%=cid %> instanceof org.apache.axis.types.Schema){
		                org.apache.axis.types.Schema schema_<%=cid %> = (org.apache.axis.types.Schema) value_<%=cid %>;
		                org.apache.axis.message.MessageElement[] _any_<%=cid %> = schema_<%=cid %>.get_any();
		                for (int s_<%=cid %> = 0; s_<%=cid %> < _any_<%=cid %>.length; s_<%=cid %>++) {
		                    results_<%=cid %>[s_<%=cid %>] = _any_<%=cid %>[s_<%=cid %>].toString();
		                }	
		                
		            } else {
					    results_<%=cid %>[0] = value_<%=cid %>;
		            }
	            
			<%} else {%>
		        Object[] results_<%=cid %> = null;
			    int nb_line_<%=cid %> = 0;
			    
			    org.talend.TalendJobHTTPClientConfiguration clientConfig_<%=cid%> = new org.talend.TalendJobHTTPClientConfiguration();
				clientConfig_<%=cid%>.setTimeout(<%=timeout %>);
				<%log.info(log.str("Invoking talend webservice job."));%>
		        org.talend.TalendJob talendJob_<%=cid%> = new org.talend.TalendJobProxy(<%=endpoint %>);
				talendJob_<%=cid%>.setClientConfig(clientConfig_<%=cid%>);	        
		        String[][] runJob_<%=cid%> = talendJob_<%=cid%>.runJob(new String[]{
				<%
		        for (int i = 0; i < params.size(); i++) {
		            Map<String, String> line = params.get(i);
					%>
	        		<%= line.get("VALUE") %>,
				<%
	        	}
				%> 
	        	});
		        for (String[] item_<%=cid%> : runJob_<%=cid%>) {
					results_<%=cid %> = item_<%=cid%>;
			<%}%>            
		
	        nb_line_<%=cid %>++;
		       
			// for output
			<%
			List<? extends IConnection> conns = node.getOutgoingSortedConnections();
			String firstConnName = "";
			if (conns!=null) {//1
				if (conns.size()>0) {//2
					IConnection conn = conns.get(0); //the first connection
					firstConnName = conn.getName();			
					if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//3
		
						List<IMetadataColumn> columns=metadata.getListColumns();
						int columnSize = columns.size();
						for (int i=0;i<columnSize;i++) {//4
							IMetadataColumn column=columns.get(i);
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							%>
								
					
							if(<%=i %> < results_<%=cid %>.length && results_<%=cid %>[<%=i %>]!=null){				
								<%
								if(javaType == JavaTypesManager.OBJECT){//Object
								%>
									<%=conn.getName() %>.<%=column.getLabel() %> = results_<%=cid %>[<%=i %>];					
								<%
								}else if(javaType == JavaTypesManager.STRING) { //String 
								%>
									<%=conn.getName() %>.<%=column.getLabel() %> = results_<%=cid %>[<%=i %>].toString();
								<%
								} else if(javaType == JavaTypesManager.DATE) { //Date
								%>					
									if(results_<%=cid %>[<%=i %>] instanceof java.util.GregorianCalendar) {
										<%=conn.getName() %>.<%=column.getLabel() %> = ((java.util.GregorianCalendar)results_<%=cid %>[<%=i%>]).getTime();
				                   	}else{
										<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(results_<%=cid %>[<%=i %>].toString(), <%= patternValue %>);
									}
								<%
								} else if(javaType == JavaTypesManager.BYTE_ARRAY) { //byte[]
								%>
									<%=conn.getName() %>.<%=column.getLabel() %> = results_<%=cid %>[<%=i %>].toString().getBytes();
								<%
								} else  { //other
								%>						
									<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(results_<%=cid %>[<%=i %>].toString());
								<%
								}
								%>
							} else { 
								<%=conn.getName() %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
							}
						<%		
						} //4
						log.debug(log.str("Retrieving the record "), log.var("nb_line"), log.str("."));
					}//3
					if (conns.size()>1) {
						for (int i=1;i<conns.size();i++) {
							IConnection conn2 = conns.get(i);
							if ((conn2.getName().compareTo(firstConnName)!=0)&&(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
						    	for (IMetadataColumn column: metadata.getListColumns()) {%>
			      					<%=conn2.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
							 	<%
							 	}
							}
						}
					}
				}//2
			}//1
			%>
		///////////////////////////////////       
		<%
	  	}
	}  
 	%>
 
<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{//the following is the use the wsdl2java
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>

	<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata!=null) {
	        String code = ElementParameterParser.getValue(node, "__CODE__");
	        
	        // we give a default value to prevComponentName so that no error
	        // occur when the user tries to generated Java code while no input
	        // component was linked to our tJavaRow.        
	        String outputRowName = new String("output_row");
	        
	        List< ? extends IConnection> outConns = node.getOutgoingSortedConnections();
	        if (outConns != null && !outConns.isEmpty()) {
	            IConnection outConn = outConns.get(0);
	            outputRowName = outConn.getName();
	        }
	
	        // In case the user would make some tricky Java things, he can use
	        // the arrays as a whole.
	
	        code = code.replaceAll(
	            "output_row",
	            outputRowName
	        );
			%>
			int nb_line_<%=cid %> = 0;
			
		    <%=code%>
	    
	    	nb_line_<%=cid %>++;
		<%
	    }
	}
	%>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
%> 
