<%@ jet 
imports="
	org.talend.core.model.process.INode 
	org.talend.core.model.process.ElementParameterParser 
	org.talend.designer.codegen.config.CodeGeneratorArgument
	java.util.List
	java.util.ArrayList
	java.util.Map
" 
%>

	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String bucket = ElementParameterParser.getValue(node,"__BUCKET__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

	boolean enableACL = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__ACCESS_CONTROL_LIST__"));
	List<Map<String, String>> paramsACL = ElementParameterParser.getTableValue(node,"__ACL__");
	final String cannedACL = ElementParameterParser.getValue(node, "__CANNED_ACCESS_CONTROL_LIST__");
	final boolean enableCannedACL = (cannedACL != null) && (!cannedACL.isEmpty()) && !("\"NONE\"".equals(cannedACL));
	%>
		<%@ include file="../tS3Connection/S3Client.javajet" %>
	try{
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Creating a bucket with name:" + <%=bucket%>);
		<%
		}
		%>
  		<%
		if (enableACL) {  // need Access Control List.
		%>
			com.amazonaws.services.s3.model.AccessControlList accessCtrlList = new com.amazonaws.services.s3.model.AccessControlList();
			accessCtrlList.setOwner(conn_<%=cid%>.getS3AccountOwner());
			accessCtrlList.setRequesterCharged(true); 
        <%
                        int grantee_id = 1;
			for (Map<String, String> paramACL : paramsACL) {
				List<String> logAcl = new ArrayList<String>();
				String aclAccountId = paramACL.get("ID");
        %> 
                    com.amazonaws.services.s3.model.Grantee grantee_<%=cid%>_<%=grantee_id%> = (<%=aclAccountId%>.indexOf('@') > -1) ? new com.amazonaws.services.s3.model.EmailAddressGrantee(<%=aclAccountId%>) : new com.amazonaws.services.s3.model.CanonicalGrantee(<%=aclAccountId%>);
        <%
				if ("true".equalsIgnoreCase(paramACL.get("READ"))) {
					logAcl.add("Read");
        %> 
                    accessCtrlList.grantPermission(grantee_<%=cid%>_<%=grantee_id%>, com.amazonaws.services.s3.model.Permission.Read);
        <%
				}
				if ("true".equalsIgnoreCase(paramACL.get("READ_ACL"))) {
					logAcl.add("ReadAcp");
        %> 
accessCtrlList.grantPermission(grantee_<%=cid%>_<%=grantee_id%>, com.amazonaws.services.s3.model.Permission.ReadAcp);
        <%
				}
				if ("true".equalsIgnoreCase(paramACL.get("WRITE"))) {
					logAcl.add("Write");
        %> 
accessCtrlList.grantPermission(grantee_<%=cid%>_<%=grantee_id%>, com.amazonaws.services.s3.model.Permission.Write);
        <%
				}
				if ("true".equalsIgnoreCase(paramACL.get("WRITE_ACL"))) {
					logAcl.add("WriteAcp");
        %> 
accessCtrlList.grantPermission(grantee_<%=cid%>_<%=grantee_id%>, com.amazonaws.services.s3.model.Permission.WriteAcp);
        <%
				}
                                grantee_id++;
					
				if(isLog4jEnabled){
				%>	
					log.debug("<%=cid%> - Set ACL on bucket '"+<%=bucket%>+"' for '"+<%=aclAccountId%>+"' : <%=String.join(", ", logAcl)%>");
				<%
				}
			}
		}
  		%>
                com.amazonaws.services.s3.model.CreateBucketRequest bucketRequest_<%=cid%> = new com.amazonaws.services.s3.model.CreateBucketRequest(<%=bucket%>);
		<%if (enableACL) {%>
				bucketRequest_<%=cid%>.withAccessControlList(accessCtrlList);
		<%}%>
		<%if (enableCannedACL) {%>
		    {
		        final String cannedACLChoice = <%= cannedACL %>;
		        if (cannedACLChoice != null && (!cannedACLChoice.isEmpty()) && !("NONE".equals(cannedACLChoice))) {
			       bucketRequest_<%=cid%>.withCannedAcl(com.amazonaws.services.s3.model.CannedAccessControlList.valueOf(cannedACLChoice));
			    }
			}
		<%}%>
		conn_<%=cid%>.createBucket(bucketRequest_<%=cid%>);
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Create the bucket successfully.");
		<%
		}
		%>
	}catch(java.lang.Exception e_<%=cid%>){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
		<%
		if (("true").equals(dieOnError)) {
		%>
			throw(e_<%=cid%>);
		<%
		} else {
			if(isLog4jEnabled){
			%>
				log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
			<%
			}
			%>
			System.err.println(e_<%=cid%>.getMessage());
		<%
		}
		if(!("true").equals(useExistingConn)) {
		%>
	}finally{
		if(conn_<%=cid%> !=null){
			conn_<%=cid%>.shutdown();
		}
		<%
		}
		%>
	}
	
