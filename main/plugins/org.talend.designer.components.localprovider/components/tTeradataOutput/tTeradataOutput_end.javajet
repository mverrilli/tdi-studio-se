
<%@ jet
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IProcess
    java.util.List

"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

    String cid = node.getUniqueName();
    dbLog = new DBLogUtil(node);
    IProcess process = node.getProcess();
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

    String useBatchSize = ElementParameterParser.getValue(node, "__USE_BATCH_SIZE__");
    boolean setAutoCommit = false;
    String useBatchAndUseConn = ElementParameterParser.getValue(node,"__USE_BATCH_AND_USE_CONN__");
    boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));

    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));

    String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    if(useExistingConnection) {
        List<? extends INode> nodes = process.getNodesOfType("tTeradataConnection");
        for (INode ne:nodes) {
            if (connection.equals(ne.getUniqueName())) {
                setAutoCommit = "true".equals(ElementParameterParser.getValue(ne, "__AUTO_COMMIT__"));
                break;
            }
        }
    }

    boolean useBatch = true;
    if(useExistingConnection){
        useBatch = (rejectConnName == null)
                       && (
                            ("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                          )
                       && "true".equals(useBatchAndUseConn);
    }else{
        useBatch = (rejectConnName == null)
                       && (
                            ("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                          )
                       && "true".equals(useBatchSize);
    }


    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else { // dataAction equals "INSERT" or "UPDATE" or "DELETE"
%>

        <%if (useBatch) {
        %>
                try {
                    if ( batchSizeCounter_<%=cid%> > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_<%=cid%> = 0;
                        <%dbLog.batch().executeTry(dbLog.str(dataAction));%>
                        for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
                            countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                        }
                        <%dbLog.batch().executeDone(dbLog.str(dataAction));%>

                        <%if (("INSERT").equals(dataAction)) {
                        %>
                            insertedCount_<%=cid%> += countSum_<%=cid%>;
                        <%
                        }else if (("UPDATE").equals(dataAction)) {
                        %>
                            updatedCount_<%=cid%> += countSum_<%=cid%>;
                        <%
                        }else if (("DELETE").equals(dataAction)) {
                        %>
                            deletedCount_<%=cid%> += countSum_<%=cid%>;
                        <%
                        }%>

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
                    <% if (isEnableDebug) { %>
                    java.sql.SQLException e2 = e;
                    while (e2 != null) {
                        <% dbLog.logPrintedException("e.getMessage()"); %>
                        System.err.println(e.getMessage());
                        e2 = e2.getNextException();
                    }
                    <% } %>
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    <%
                        dbLog.logPrintedException("e.getMessage()");
                     %>
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    <%
                        dbLog.logPrintedException("e.getMessage()");
                     %>
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                <%
                        dbLog.logPrintedException("e.getMessage()");
                %>
                e.printStackTrace();
            }
                    <%if(("true").equals(dieOnError)) {
                    %>
                throw(e3);
                    <%
                    }else {
                dbLog.logPrintedException("e3.getMessage()");
                    %>
                System.err.println(e3.getMessage());
                    <%
                    }%>
                }
        <%
        }%>

        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            pstmt_<%=cid %> = null;
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    }
%>
    resourceMap.put("statementClosed_<%=cid%>", true);
<%
    if(!useExistingConnection){
        if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
            %>
            if (commitCounter_<%=cid%> > 0) {
                <%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
                conn_<%=cid%>.commit();
                <%dbLog.commit().commitDone(null);%>
            }
            <%
        }
        %>
        <%@ include file="../tTeradataInput/TeradataQueryBandEnd.javajet"%>

        <%dbLog.conn().closeTry(null);%>
        conn_<%=cid%>.close();
        <%dbLog.conn().closeDone(null);%>

        resourceMap.put("finish_<%=cid%>", true);
        <%
    }
    %>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>

